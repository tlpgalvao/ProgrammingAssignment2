isTRUE(6 > 4)
identical("twins", "twins")
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints>7)
any(ints<0)
all(ints>0)
q()
library("")
library("swirl")
swirl()
Sys.Date()
library("swirl")
swirl()
mean(c(2,4,5))
submit()
boring_function("My first function")
boring_function("My first function!")
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(standard deviation,c(1.4, 3.6, 7.9, 8.8))
evaluate(standard_deviation,c(1.4, 3.6, 7.9, 8.8))
d
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(median,c(1.4, 3.6, 7.9, 8.8))
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
bye()
q()
library("swirl")
swirl()
evaluate(function(x){x+1}, 6)
evaluate(function(x) {c(x(1))}, c(8, 4, 0))
evaluate(function(s) {s(c(x(1)))}, c(8, 4, 0))
evaluate(function(s) {s(c(x(1)))}, c(8, 4, 0))
evaluate({c(x(1))}, c(8, 4, 0))
evaluate(x {c(x(1))}, c(8, 4, 0))
evaluate(c(x(1)), c(8, 4, 0))
evaluate(c(1), c(8, 4, 0))
evaluate(func(x) {c(1)}, c(8, 4, 0))
evaluate(func(x) {c(x,0,0)}, c(8, 4, 0))
evaluate(c(x,0,0), c(8, 4, 0))
evaluate(function(x){x}, c(8, 4, 0))
evaluate(function(x){c(x(1))}, c(8, 4, 0))
evaluate(function(x){c(x)}, c(8, 4, 0))
evaluate(function(x){x(c(1))}, c(8, 4, 0))
evaluate(function(x){x[c(1)]}, c(8, 4, 0))
evaluate(function(x){x[c(3)]}, c(8, 4, 0))
evaluate(function(x){x[c(length())]}, c(8, 4, 0))
evaluate(function(x){x[c(length(x))]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram(Hello World)
telegram("Hello World")
bye()
q()
library("swirl")
swirl()
bye()
q()
library("swirl")
swirl()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
mad_libs("Santo Tirso", "nice", "stuff")
submit()
submit()
submit()
I %p% love %p% R!
"I" %p% "love" %p% "R!"
q()
library("swirl")
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
cls_vect <- lapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors, 1:6)
head(flag_colors[1:6,])
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_collors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes)
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mar
bye()
q()
library("swirl")
swirl()
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
lapply(flags, unique)
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
q()
library("swirl")
swirl()
bye()
swirl()
dim(flags)
dim()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
q()
library("swirl")
swirl()
ls(plants)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
q()
library("swirl")
rm(list=ls())
swirl()
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:6, 4)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- sample(1, 100, replace = TRUE, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm()
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
q()
library("swirl")
rm(list=ls())
0
q()
library("swirl")
swirl()
d1 <- sys.date()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- Sys.time()
t2 <- as.POSIXltSys.time()
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weefdays(d1)
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strtime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
bye()
0
q()
library("swirl")
rm(list=ls())
swirl()
data(cars)
?cars
head(cars)
dim(cars)
names(cars)
tail(cars)
summary(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot", sub = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2
)
mtcars
data(mtcars)
play()
dim(mtcars)
head(mtcars)
nxt()
?boxplot()
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
q()
library(swirl)
swirl()
quit
quit()
library(swirl)
swirl
swirl()
install_from_swirl
install_from_swirl()
install_from_swirl(Getting_and_Cleaning_Data)
install_from_swirl("Getting_and_Cleaning_Data")
ls
ls()
cd ..
ls
cd ..
ls
0
ls
quit()
library(swirl)
ls
swirl()
swirl()
install_from_swirl("Data Analysis")
install_from_swirl("Mathematical Biostatistics Boot Camp")
install_from_swirl("Regression Models")
install_from_swirl("Statistical Inference")
swirl()
install_from_swirl("Exploratory_Data_Analysis")
quit()
x <- 4
class(x)
x c(4, "a", TRUE)
x <- c(4, "a", TRUE)
class(x)
x <- c(1,3,5)
y <- c(3,2,10)
cbind(x, y)
x <- list(2, "a", "b", TRUE)
x[[2]]
x <- 1:4
y <- 2:3
x + y
x <- c(17, 14, 4, 5, 13, 12, 10)
x[x >= 11] <- 4
x
x2 <- c(17, 14, 4, 5, 13, 12, 10)
x2[x > 10] == 4
ls()
ls()
read.csv("hw1_data.csv)
read.csv("hw1_data.csv")
hw1_data.csv <- read.csv("hw1_data.csv")
names(hw1_data.csv)
head(hw1_data.csv, 2)
nrow(hw1_data.csv)
tail(hw1_data.csv, 2)
hw1_data.csv$Ozone[47]
sum(is.na(hw1_data.csv$Ozone))
mean(hw1_data.csv$Ozone, na.rm = TRUE)
subset <- subset(hw1_data.csv$Ozone > 31 & hw1_data.csv$Temp >90)
?subset
subset <- subset(hw1_data.csv, Ozone > 31 & Temp >90)
mean(subset)
mean(subset, na.rm = TRUE)
mean(subset$Solar.R, na.rm = TRUE)
mean(subset$Solar.R)
subset2 <- subset(hw1_data.csv, Month == 6)
mean(subset2$Temp)
subset3 <- subset(hw1_data.csv, Month == 5)
max(hw1_data.csv$Ozone)
max(hw1_data.csv$Ozone, na.rm = TRUE)
max(subset3$Ozone, na.rm = TRUE)
x <- 1:4
y <- 2:3
class(x + y)
quit()
cube <- function(x, n) {x^3}
cube(3)
x <- 1:10
if(x > 5) {x <- 0}
x
if(x < 5) {x <- 0}
x
f <- function(x) {g <- function(y) {x + z}}
f <- function(x) {g <- function(y) {x + z} z <- 4 x + g(x)}
f <- function(x) {g <- function(y) {y + z} z <- 4 x + g(x)}
f <- function(x) {g <- function(y) {y + z}, z <- 4, x + g(x)}
f <- function(x) {g <- function(y) {y + z}, z <- 4, x + g(x)}
f <- function(x) {g <- function(y) {
y + z}
}
f <- function(x) {
g <- function(y) {}
y + z
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
x
y
quit()
pollutantmean.R <- function(directory, pollutant, id = 1:332) {}
pollutantmean.R <- function(directory, pollutant, id = 1:332) {
dat <- read.csv("directory/id.csv")
PM <- dat$pollutant
mean(PM, na.rm = TRUE) }
pollutantmean.R("specdata", "sulfate", 1)
exit()
quit()
?list.files
?rbind
pollutantmean.R <- function(directory, pollutant, id = 1:332) {
files_list <- list.files(directory, full.names = TRUE)
dat <- data.frame()
for (i in id) {
dat <- rbind(dat, read.csv(files_list[i]))
}
dat_subset <- dat[which(dat[, "id"] == id),]
mean(dat_subset[ , "pollutant"], na.rm = TRUE)
}
pollutantmean.R("specdata", "sulfate", 1:10)
pollutantmean.R <- function(directory, pollutant, id = 1:332) {
files_list <- list.files(directory, full.names = TRUE)
dat <- data.frame()
for (i in id) {
dat <- rbind(dat, read.csv(files_list[i]))
}
mean(dat_subset[ , "pollutant"], na.rm = TRUE)
}
pollutantmean.R("specdata", "sulfate", 1:10)
pollutantmean.R <- function(directory, pollutant, id = 1:332) {
files_list <- list.files(directory, full.names = TRUE)
dat <- data.frame()
for (i in id) {
dat <- rbind(dat, read.csv(files_list[i]))
}
mean(dat[ , "pollutant"], na.rm = TRUE)
}
pollutantmean.R <- function(directory, pollutant, id = 1:332) {
files_list <- list.files(directory, full.names = TRUE)
dat <- data.frame()
for (i in id) {
dat <- rbind(dat, read.csv(files_list[i]))
}
mean(dat[ , "pollutant"], na.rm = TRUE)
}
pollutantmean.R("specdata", "sulfate", 1:10)
pollutantmean.R <- function(directory, pollutant, id = 1:332) {
files_list <- list.files(directory, full.names = TRUE)
dat <- data.frame()
for (i in id) {
dat <- rbind(dat, read.csv(files_list[i]))
}
mean(dat[ , pollutant], na.rm = TRUE)
}
pollutantmean.R("specdata", "sulfate", 1:10)
pollutantmean.R("specdata", "nitrate", 70:72)
pollutantmean.R("specdata", "nitrate", 23)
quit()
undebug(ls)
ls
ls()
ls
quit()
ls()
cd()
dir()
cd(..)
cd()..
dir()
getwd()
setwd("..")
getwd()
ls()
dir()
setwd("..")
dir()
setwd("..")
dir()
setwd("..")
dir8)
dir()
cd("Users")
setwd("Users")
dir()
setwd("Tiago")
dir()
set("Desktop")
setwd("Desktop")
dir89
dir89
dir()
setwd("hack.lnk")
setwd("hack")
setwd("C:\Users\Tiago\hack")
dir()
setwd("..")
dir()
setwd("hack")
dir()
setwd("ProgrammingAssignment2/")
dir()
source("cachematrix.R")
source("cachematrix.R")
source("cachematrix.R")
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getinverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getinverse()
source("cachematrix.R")
my_matrix$getinverse()
my_matrix$setinverse()
source("cachematrix.R")
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getinverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$getInverse()
my_matrix$getinverse()
quit()
